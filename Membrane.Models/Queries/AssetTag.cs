//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 31/12/2008 12:23:27
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    using NHibernate = global::NHibernate;
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.AssetTag
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public static Root_Query_AssetTag AssetTag {
            get {
                return new Root_Query_AssetTag();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_AssetTag
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Query_AssetTag<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_AssetTag..ctor
            /// </summary>
            public Query_AssetTag() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_AssetTag..ctor
            /// </summary>
            public Query_AssetTag(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_AssetTag..ctor
            /// </summary>
            public Query_AssetTag(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_AssetTag.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Tag {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Tag", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_AssetTag.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Folders Folders {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Folders");
                    return new Query_Collection_Folders(this, "Folders", temp);
                }
            }
            
            public virtual Query_Collection_Assets Assets {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Assets");
                    return new Query_Collection_Assets(this, "Assets", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            public class Query_Collection_Folders : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Folders(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_AssetFolder<T1> With() {
                    Query_AssetFolder<T1> query = new Query_AssetFolder<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetFolder<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_AssetFolder<T1> query = new Query_AssetFolder<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetFolder<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_AssetFolder<T1> query = new Query_AssetFolder<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetFolder<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_AssetFolder<T1> query = new Query_AssetFolder<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            public class Query_Collection_Assets : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Assets(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_AssetItem<T1> With() {
                    Query_AssetItem<T1> query = new Query_AssetItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetItem<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_AssetItem<T1> query = new Query_AssetItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetItem<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_AssetItem<T1> query = new Query_AssetItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetItem<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_AssetItem<T1> query = new Query_AssetItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_AssetTag
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Root_Query_AssetTag : Query_AssetTag<Membrane.Models.AssetManagement.AssetTag> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.AssetTag
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class AssetTag {
            
            /// <summary>
            /// Query helper for member AssetTag.Tag
            /// </summary>
            public static OrderByClause Tag {
                get {
                    return new OrderByClause("Tag");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetTag.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.AssetTag
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class AssetTag {
            
            /// <summary>
            /// Query helper for member AssetTag.Tag
            /// </summary>
            public static PropertyProjectionBuilder Tag {
                get {
                    return new PropertyProjectionBuilder("Tag");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetTag.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.AssetTag
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class AssetTag {
            
            /// <summary>
            /// Query helper for member AssetTag.Tag
            /// </summary>
            public static NHibernate.Criterion.IProjection Tag {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Tag");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetTag.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
