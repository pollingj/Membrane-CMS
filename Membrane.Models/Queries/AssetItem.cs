//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 31/12/2008 12:23:27
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    using NHibernate = global::NHibernate;
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.AssetItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public static Root_Query_AssetItem AssetItem {
            get {
                return new Root_Query_AssetItem();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_AssetItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Query_AssetItem<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_AssetItem..ctor
            /// </summary>
            public Query_AssetItem() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem..ctor
            /// </summary>
            public Query_AssetItem(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem..ctor
            /// </summary>
            public Query_AssetItem(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Url {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Url", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Caption {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Caption", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Source {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Source", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> IsDeleted {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "IsDeleted", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_AssetItem.
            /// </summary>
            public virtual Query_AssetFolder<T1> Folder {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Folder");
                    Query_AssetFolder<T1> child = new Query_AssetFolder<T1>(null, "Folder", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Tags Tags {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Tags");
                    return new Query_Collection_Tags(this, "Tags", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            public class Query_Collection_Tags : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Tags(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_AssetTag<T1> With() {
                    Query_AssetTag<T1> query = new Query_AssetTag<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetTag<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_AssetTag<T1> query = new Query_AssetTag<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetTag<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_AssetTag<T1> query = new Query_AssetTag<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_AssetTag<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_AssetTag<T1> query = new Query_AssetTag<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_AssetItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Root_Query_AssetItem : Query_AssetItem<Membrane.Models.AssetManagement.AssetItem> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.AssetItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class AssetItem {
            
            /// <summary>
            /// Query helper for member AssetItem.Url
            /// </summary>
            public static OrderByClause Url {
                get {
                    return new OrderByClause("Url");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Caption
            /// </summary>
            public static OrderByClause Caption {
                get {
                    return new OrderByClause("Caption");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Source
            /// </summary>
            public static OrderByClause Source {
                get {
                    return new OrderByClause("Source");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.IsDeleted
            /// </summary>
            public static OrderByClause IsDeleted {
                get {
                    return new OrderByClause("IsDeleted");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.AssetItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class AssetItem {
            
            /// <summary>
            /// Query helper for member AssetItem.Url
            /// </summary>
            public static PropertyProjectionBuilder Url {
                get {
                    return new PropertyProjectionBuilder("Url");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Caption
            /// </summary>
            public static PropertyProjectionBuilder Caption {
                get {
                    return new PropertyProjectionBuilder("Caption");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Source
            /// </summary>
            public static PropertyProjectionBuilder Source {
                get {
                    return new PropertyProjectionBuilder("Source");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.IsDeleted
            /// </summary>
            public static PropertyProjectionBuilder IsDeleted {
                get {
                    return new PropertyProjectionBuilder("IsDeleted");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.AssetItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class AssetItem {
            
            /// <summary>
            /// Query helper for member AssetItem.Url
            /// </summary>
            public static NHibernate.Criterion.IProjection Url {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Url");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Caption
            /// </summary>
            public static NHibernate.Criterion.IProjection Caption {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Caption");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Source
            /// </summary>
            public static NHibernate.Criterion.IProjection Source {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Source");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.IsDeleted
            /// </summary>
            public static NHibernate.Criterion.IProjection IsDeleted {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("IsDeleted");
                }
            }
            
            /// <summary>
            /// Query helper for member AssetItem.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
